generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "seed-model.dbml"
  projectName         = "SEED 2.0"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "SEED 2.0"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./docs"
}

enum Role {
  ADMIN
  CLIENT
  GUIDE
  LEADER
}

enum Designation {
  ACCOUNT
  DRIVER
  MANAGER
  MD
  SUPPORT
  RECEPTIONIST
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCKED
}

model Admin {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  phone        String?
  profileImage String?
  roles        Role[]    @default([CLIENT])
  isActive     Boolean   @default(true)
  isBlocked    Boolean   @default(false)
  lastLoggedIn DateTime? @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("admins")
}

model User {
  id            String               @id @default(uuid())
  name          String?
  email         String               @unique
  phone         String?
  profileImage  String?
  status        Status?              @default(ACTIVE)
  roles         UserRole[]
  dob           DateTime?
  address       Address?
  bankId        String?
  bank          Bank?                @relation(fields: [bankId], references: [id], onDelete: SetNull)
  professional  ProfessionalProfile?
  accountNumber String?
  designation   Designation?
  groups        UsersOnGroup[]

  ledPMS    PMS[] @relation("PMSLeader")
  guidedPMS PMS[] @relation("PMSGuide")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Bank {
  id        String   @id @default(uuid())
  name      String?
  class     String?
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banks")
}

model UserRole {
  userId String
  roleId Role
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model Address {
  id      String  @id @default(uuid())
  userId  String  @unique
  country String?
  state   String?
  city    String?
  address String?
  zipCode String?
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model ProfessionalProfile {
  id             String    @id @default(uuid())
  userId         String    @unique
  companyName    String?
  passportNumber String?
  passportExpire DateTime?
  citizenNumber  String?
  panNumber      String?
  guide_license  String?
  nma            DateTime?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("professional_profiles")
}

model Hotel {
  id    String  @id @default(uuid())
  name  String?
  image String?

  branch    HotelBranch[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("hotels")
}

model HotelBranch {
  id      String  @id @default(uuid())
  name    String?
  state   String?
  city    String?
  address String?
  phone   String?

  // Poc stand for point of contact 
  poc            String?
  pocPhone       String?
  pocDesignation String?

  email   String?
  hotel   Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  booking   Booking[]

  @@map("hotel_branches")
}

model Lodge {
  id    String  @id @default(uuid())
  name  String?
  image String?

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  branch    LodgeBranch[]

  @@map("lodges")
}

model LodgeBranch {
  id             String  @id @default(uuid())
  name           String?
  state          String?
  city           String?
  address        String?
  phone          String?
  poc            String?
  pocPhone       String?
  pocDesignation String?
  email          String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lodge     Lodge     @relation(fields: [lodgeId], references: [id], onDelete: Cascade)
  lodgeId   String
  booking   Booking[]

  @@map("lodge_branches")
}

model Franchise {
  id    String  @id @default(uuid())
  name  String?
  image String?

  branch    FranchisePackages[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("franchises")
}

model FranchisePackages {
  id          String @id @default(uuid())
  name        String @unique
  duration    Int
  description Json

  franchise   Franchise @relation(fields: [franchiseId], references: [id], onDelete: Cascade)
  franchiseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  PMS       PMS[]

  @@map("franchise_packages")
}

model Group {
  id           String         @id @default(uuid())
  groupId      String         @unique
  PMS          PMS[]
  UsersOnGroup UsersOnGroup[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  booking   Booking[]

  @@map("groups")
}

model UsersOnGroup {
  groupId String
  userId  String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupId, userId])
  @@map("users_on_group")
}

model PMS {
  id      String  @id @default(uuid())
  groupId String?
  group   Group?  @relation(fields: [groupId], references: [groupId], onDelete: SetNull, onUpdate: Cascade)

  leaderId String?
  leader   User?   @relation("PMSLeader", fields: [leaderId], references: [id], onDelete: SetNull)

  guideId String?
  guide   User?   @relation("PMSGuide", fields: [guideId], references: [id], onDelete: SetNull)

  packageId String?
  package   FranchisePackages? @relation(fields: [packageId], references: [id], onDelete: SetNull)

  customPackage Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pms")
}

model Booking {
  id      String       @id @default(uuid())
  date    DateTime
  meal    String
  hotelId String?
  hotel   HotelBranch? @relation(fields: [hotelId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  lodgeId String?
  lodge   LodgeBranch? @relation(fields: [lodgeId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [groupId], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}
