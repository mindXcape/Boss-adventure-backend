generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "seed-model.dbml"
  projectName         = "SEED 2.0"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "SEED 2.0"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./docs"
}

enum Role {
  ADMIN
  CLIENT
  GUIDE
  LEADER
}

enum Designation {
  ACCOUNT
  DRIVER
  MANAGER
  MD
  SUPPORT
  RECEPTIONIST
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCKED
}

model Admin {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  phone        String?
  profileImage String?
  roles        Role[]    @default([CLIENT])
  isActive     Boolean   @default(true)
  isBlocked    Boolean   @default(false)
  lastLoggedIn DateTime? @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("admins")
}

model User {
  id            String               @id @default(uuid())
  name          String?
  email         String               @unique
  phone         String?
  profileImage  String?
  status        Status?              @default(ACTIVE)
  roles         UserRole[]
  dob           DateTime?
  address       Address?
  bankId        String?
  bank          Bank?                @relation(fields: [bankId], references: [id], onDelete: SetNull)
  professional  ProfessionalProfile?
  accountNumber String?
  designation   Designation?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@map("users")
}

model Bank {
  id        String   @id @default(uuid())
  name      String?
  class     String?
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banks")
}

model UserRole {
  userId String
  roleId Role
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model Address {
  id      String  @id @default(uuid())
  userId  String  @unique
  country String?
  state   String?
  city    String?
  address String?
  zipCode String?
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model ProfessionalProfile {
  id             String    @id @default(uuid())
  userId         String    @unique
  companyName    String?
  passportNumber String?
  passportExpire DateTime?
  citizenNumber  String?
  panNumber      String?
  guide_license  String?
  nma            DateTime?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("professional_profiles")
}

model Hotel {
  id    String  @id @default(uuid())
  name  String?
  image String?

  branch    HotelBranch[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("hotels")
}

model HotelBranch {
  id      String  @id @default(uuid())
  name    String?
  state   String?
  city    String?
  address String?
  phone   String?

  // Poc stand for point of contact 
  poc            String?
  pocPhone       String?
  pocDesignation String?

  email   String?
  hotel   Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hotel_branches")
}

model Lodge {
  id    String  @id @default(uuid())
  name  String?
  image String?

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  branch    LodgeBranch[]

  @@map("lodges")
}

model LodgeBranch {
  id             String  @id @default(uuid())
  name           String?
  state          String?
  city           String?
  address        String?
  phone          String?
  poc            String?
  pocPhone       String?
  pocDesignation String?
  email          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lodge     Lodge    @relation(fields: [lodgeId], references: [id], onDelete: Cascade)
  lodgeId   String

  @@map("lodge_branches")
}
